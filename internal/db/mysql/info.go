package mysql

/*
	This code is generated by bgo
	https://github.com/haozibi/bgo
*/

import (
	"fmt"
	"time"

	"github.com/solution9th/S3Adapter/conf"

	"github.com/haozibi/gendry/builder"
)

// const (
// 	// TableNameInfo table name
// 	TableNameInfo = "info"
// )

// Info table info struct
type Info struct {
	ID int64 `json:"id" `

	// OsAccessKey 本地key
	OsAccessKey string `json:"os_access_key" `

	// OsScrectKey 本地key
	OsScrectKey string `json:"os_screct_key" `

	// EngineType 对象存储
	EngineType string `json:"engine_type" `

	// EngineAccessKey 引擎具体的key
	EngineAccessKey string `json:"engine_access_key" `

	// EngineSecretKey 引擎具体的key
	EngineSecretKey string `json:"engine_secret_key" `

	// EngineRegion 引擎具体的位置
	EngineRegion string `json:"engine_region"`

	// CreateTime 添加时间
	CreateTime time.Time `json:"create_time" `

	// AppName 应用名称
	AppName string `json:"app_name" `

	// AppRemark 应用备注
	AppRemark string `json:"app_remark" `
}

// AddTable 如果表不存在则创建
func (d *MySQLFunc) AddTable() (err error) {

	body, err := conf.Asset("conf/info.sql")
	if err != nil {
		return err
	}

	sql := fmt.Sprintf(string(body), d.tableNameInfo)

	cond, val, err := builder.NamedQuery(sql, nil)
	if err != nil {
		return err
	}

	_, err = d.client.Exec(cond, val...)
	return err
}

// CountInfo 统计 info 数量
func (d *MySQLFunc) CountInfo(ak, sk, engine string) (int, error) {

	sql := fmt.Sprintf("SELECT COUNT(*) AS `count` FROM %v WHERE engine_access_key = {{ak}} AND engine_secret_key = {{sk}} AND engine_type = {{engine}}", d.tableNameInfo)

	cond, val, err := builder.NamedQuery(sql, map[string]interface{}{
		"ak":     ak,
		"sk":     sk,
		"engine": engine,
	})
	if err != nil {
		return 0, err
	}

	return d.count(cond, val...)
}

// GetInfo 根据 OsAccessKey 查找具体 info
func (d *MySQLFunc) GetInfo(ak string) (interface{}, error) {

	var m Info

	if ak == "" {
		return m, ErrMissParams
	}

	where := map[string]interface{}{
		"os_access_key": ak,
	}

	err := d.query(d.tableNameInfo, where, &m)
	return m, err
}

// SaveInfo 保存信息
func (d *MySQLFunc) SaveInfo(data map[string]interface{}) (id int, err error) {

	return d.save(d.tableNameInfo, data)
}

// DeleteInfo 删除 info
func (d *MySQLFunc) DeleteInfo(oak, osk string) error {

	cond, val, err := builder.BuildDelete(d.tableNameInfo, map[string]interface{}{
		"os_access_key": oak,
		"os_screct_key": osk,
	})
	if err != nil {
		return err
	}

	_, err = d.client.Exec(cond, val...)
	return err
}
